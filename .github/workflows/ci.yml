name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint:lib
        continue-on-error: true

  build-library:
    name: Build Library
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build:lib

      - name: Upload library build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: library-dist
          path: dist/ngx-i18n-tools
          retention-days: 7

  build-demo:
    name: Build Demo App
    runs-on: ubuntu-latest
    needs: build-library

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library first
        run: npm run build:lib

      - name: Build demo app (development)
        run: npm run build:demo -- --configuration=development

      - name: Upload demo build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: demo-app-dist
          path: dist/demo-app
          retention-days: 7

  e2e-workflow:
    name: Test i18n Workflow
    runs-on: ubuntu-latest
    needs: build-library

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build:lib

      - name: Link library for demo app
        run: |
          cd dist/ngx-i18n-tools
          npm link
          cd ../..
          npm link @gridatek/ngx-i18n-tools

      - name: Extract i18n
        run: npm run i18n:extract
        continue-on-error: true

      - name: Validate translations
        run: npm run i18n:validate
        continue-on-error: true

      - name: Export to XLIFF
        run: npm run i18n:export
        continue-on-error: true

      - name: Build demo with localization
        run: npm run build:demo -- --localize
        continue-on-error: true

  matrix-build:
    name: Build on Multiple Platforms
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build:lib

      - name: Build demo app
        run: npm run build:demo -- --configuration=development

  e2e-tests:
    name: E2E Tests with Playwright
    runs-on: ubuntu-latest
    needs: build-library

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build:lib

      - name: Link library for demo app
        run: |
          cd dist/ngx-i18n-tools
          npm link
          cd ../..
          npm link @gridatek/ngx-i18n-tools

      - name: Extract translations
        run: npm run i18n:extract

      - name: Fill translations
        run: npm run i18n:fill

      - name: Export translations
        run: npm run i18n:export

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run Playwright tests
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  unit-tests:
    name: Unit Tests for Scripts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit:verbose

  test-xml-format:
    name: Test XML Translation Format
    runs-on: ubuntu-latest
    needs: build-library

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build:lib

      - name: Link library for demo app
        run: |
          cd dist/ngx-i18n-tools
          npm link
          cd ../..
          npm link @gridatek/ngx-i18n-tools

      - name: Test XML format workflow
        run: npm run test:xml

  e2e-xml-tests:
    name: E2E Tests for XML Workflow
    runs-on: ubuntu-latest
    needs: build-library

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build:lib

      - name: Link library for demo app
        run: |
          cd dist/ngx-i18n-tools
          npm link
          cd ../..
          npm link @gridatek/ngx-i18n-tools

      - name: Clean up existing translation files
        run: |
          rm -f projects/demo-app/src/**/*.i18n.json
          rm -f projects/demo-app/src/**/*.i18n.xml

      - name: Switch to XML format
        run: npm run switch:xml

      - name: Extract translations (XML format)
        run: npm run i18n:extract

      - name: Fill translations
        run: npm run i18n:fill

      - name: Export to XLIFF
        run: npm run i18n:export

      - name: Validate translations
        run: npm run i18n:validate

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run XML workflow E2E tests
        run: npm run test:e2e:xml

      - name: Switch back to JSON format
        run: npm run switch:json
        if: always()

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-xml
          path: playwright-report/
          retention-days: 30

  test-merged-mode:
    name: Test Merged Translation Mode
    runs-on: ubuntu-latest
    needs: build-library

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build:lib

      - name: Link library for demo app
        run: |
          cd dist/ngx-i18n-tools
          npm link
          cd ../..
          npm link @gridatek/ngx-i18n-tools

      - name: Clean up existing translation files
        run: |
          rm -f projects/demo-app/src/**/*.i18n.json
          rm -f projects/demo-app/src/**/*.i18n.xml
          rm -f projects/demo-app/src/locale/translations.json

      - name: Extract in per-component mode
        run: npm run i18n:extract

      - name: Fill translations
        run: npm run i18n:fill

      - name: Merge to single file
        run: npm run i18n:merge

      - name: Verify merged file exists
        run: test -f projects/demo-app/src/locale/translations.json

      - name: Export from merged file
        run: npm run i18n:export

      - name: Validate merged translations
        run: npm run i18n:validate

      - name: Split back to per-component
        run: npm run i18n:split

      - name: Verify split files exist
        run: |
          test -f projects/demo-app/src/app/app.component.i18n.json
          test -f projects/demo-app/src/app/home/home.component.i18n.json
          test -f projects/demo-app/src/app/features/user-profile/user-profile.component.i18n.json

      - name: Build demo app with merged translations
        run: npm run build:demo -- --configuration=development

      - name: Test merged mode extraction (direct)
        run: |
          rm -f projects/demo-app/src/**/*.i18n.json
          rm -f projects/demo-app/src/locale/translations.json
          node -e "
          const fs = require('fs');
          const angularJson = JSON.parse(fs.readFileSync('angular.json', 'utf8'));
          angularJson.projects['demo-app'].architect['extract-i18n'].options.mode = 'merged';
          angularJson.projects['demo-app'].architect['extract-i18n'].options.outputFile = 'projects/demo-app/src/locale/translations.json';
          fs.writeFileSync('angular.json', JSON.stringify(angularJson, null, 2));
          "
          npm run i18n:extract
          test -f projects/demo-app/src/locale/translations.json

      - name: Restore angular.json
        run: git checkout angular.json
        if: always()

  test-merged-mode-xml:
    name: Test Merged Translation Mode (XML)
    runs-on: ubuntu-latest
    needs: build-library

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build:lib

      - name: Link library for demo app
        run: |
          cd dist/ngx-i18n-tools
          npm link
          cd ../..
          npm link @gridatek/ngx-i18n-tools

      - name: Clean up existing translation files
        run: |
          rm -f projects/demo-app/src/**/*.i18n.json
          rm -f projects/demo-app/src/**/*.i18n.xml
          rm -f projects/demo-app/src/locale/translations.xml

      - name: Switch to XML format
        run: npm run switch:xml

      - name: Extract in per-component mode (XML)
        run: npm run i18n:extract

      - name: Fill translations
        run: npm run i18n:fill

      - name: Merge to single XML file
        run: |
          node -e "
          const fs = require('fs');
          const angularJson = JSON.parse(fs.readFileSync('angular.json', 'utf8'));
          angularJson.projects['demo-app'].architect['i18n-merge'].options.outputFile = 'projects/demo-app/src/locale/translations.xml';
          angularJson.projects['demo-app'].architect['i18n-merge'].options.outputFormat = 'xml';
          fs.writeFileSync('angular.json', JSON.stringify(angularJson, null, 2));
          "
          npm run i18n:merge

      - name: Verify merged XML file exists
        run: test -f projects/demo-app/src/locale/translations.xml

      - name: Export from merged XML file
        run: npm run i18n:export

      - name: Validate merged XML translations
        run: npm run i18n:validate

      - name: Split back to per-component XML
        run: |
          node -e "
          const fs = require('fs');
          const angularJson = JSON.parse(fs.readFileSync('angular.json', 'utf8'));
          angularJson.projects['demo-app'].architect['i18n-split'].options.source = 'projects/demo-app/src/locale/translations.xml';
          fs.writeFileSync('angular.json', JSON.stringify(angularJson, null, 2));
          "
          npm run i18n:split

      - name: Verify split XML files exist
        run: |
          test -f projects/demo-app/src/app/app.component.i18n.xml
          test -f projects/demo-app/src/app/home/home.component.i18n.xml
          test -f projects/demo-app/src/app/features/user-profile/user-profile.component.i18n.xml

      - name: Build demo app with merged XML translations
        run: npm run build:demo -- --configuration=development

      - name: Test merged mode extraction (direct XML)
        run: |
          rm -f projects/demo-app/src/**/*.i18n.xml
          rm -f projects/demo-app/src/locale/translations.xml
          node -e "
          const fs = require('fs');
          const angularJson = JSON.parse(fs.readFileSync('angular.json', 'utf8'));
          angularJson.projects['demo-app'].architect['extract-i18n'].options.mode = 'merged';
          angularJson.projects['demo-app'].architect['extract-i18n'].options.outputFile = 'projects/demo-app/src/locale/translations.xml';
          angularJson.projects['demo-app'].architect['extract-i18n'].options.outputFormat = 'xml';
          fs.writeFileSync('angular.json', JSON.stringify(angularJson, null, 2));
          "
          npm run i18n:extract
          test -f projects/demo-app/src/locale/translations.xml

      - name: Restore files
        run: |
          git checkout angular.json
          npm run switch:json
        if: always()

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check formatting
        run: npx prettier --check "**/*.{ts,html,css,json,md}"
        continue-on-error: true

      - name: TypeScript compilation check
        run: npx tsc --noEmit
        continue-on-error: true
